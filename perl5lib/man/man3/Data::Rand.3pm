.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Rand 3"
.TH Data::Rand 3 "2017-10-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Rand \- Random string and list utility
.SH "VERSION"
.IX Header "VERSION"
This document describes Data::Rand version 0.0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Data::Rand;
\&
\&    my $rand_32_str = rand_data();
\&    my $rand_64_str = rand_data(64);
\&    my @contestants = rand_data( 2, \e@studio_audience, { \*(Aqdo_not_repeat_index\*(Aq => 1 } ); 
\&    my $doubledigit = rand_data( 2, [0 .. 9] );
\&    my @rolled_dice = rand_data( 2, [1 .. 6] );
\&    my $pickanumber = rand_data( 1, [1 .. 1000] );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple interface to easily get a string or array made of randomly chosen pieces of a set of data.
.ie n .SH "How Random is ""Random""?"
.el .SH "How Random is ``Random''?"
.IX Header "How Random is Random?"
That depends much on you.
.PP
Data::Rand works by building a string or array of the given length from a list of items that are \*(L"randomly\*(R" chosen, by default, using perl's built in rand().
.PP
You can affect rand()'s effectiveness by calling srand() or \*(L"seed_calc_with\*(R"() as you need.
.PP
You can also override the use of rand() internally altogether with something as mathmatically random as you like.
.PP
You can pass arguments as well which will affect how likley a not-so-random seeming pattern will emerge (for example: rand_data(1,['a']) will always return 'a', which is always predictable)
.PP
The tests for this module call \fIrand_data()\fR without calling srand() explicitly, with no arguments (\s-1IE\s0 out of the box defaults) 100,000 times and fails if there are any duplicates.
.PP
There's an optional test that does it 1,000,000 times but its not done by default simply for the sake of time and memory (for the test's lookup hash). From version zero-zero-four on new releases of this module must pass that test before being published.
.PP
So if that's \*(L"random\*(R" enough for you, well, there you have it!
.PP
If not, you can always make it more \*(L"truly\*(R" random as per the \s-1POD\s0 below.
.SH "EXPORT"
.IX Header "EXPORT"
\&\fIrand_data()\fR is exported by default. \fIrand_data_string()\fR and \fIrand_data_array()\fR are exportable.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "\fIrand_data()\fP"
.IX Subsection "rand_data()"
In scalar context returns a string made of a number of parts you want made up from an array of parts.
.PP
In array context it returns a list the length of number of parts you want where each item is from the array of parts.
.PP
Takes 0 to 3 arguments:
.IP "1) length or number of random parts (default if not given or invalid is 32)" 4
.IX Item "1) length or number of random parts (default if not given or invalid is 32)"
.PD 0
.IP "2) array ref of parts (default if not given or invalid is 0 .. 9 and upper and lower case a\-z)" 4
.IX Item "2) array ref of parts (default if not given or invalid is 0 .. 9 and upper and lower case a-z)"
.IP "3) hashref of behavioral options (this one can also be passed as the only argument or the second argument so long as its the *last* argument)" 4
.IX Item "3) hashref of behavioral options (this one can also be passed as the only argument or the second argument so long as its the *last* argument)"
.PD
keys and values are described below, unless otherwise noted options are booleans which default to false
.RS 4
.IP "\(bu" 4
\&'use_unique_list'
.Sp
Make sure array of parts is unique. If you're passing the same list more than once and you are doing this each time it'd be more efficient to \fIuniq()\fR the list once and pass that to the function instead of using this.
.IP "\(bu" 4
\&'do_not_repeat_index'
.Sp
Do not use any index of the array of parts more than once.
.Sp
Caveat: if the length is longer than the list of items then the length is silently adjusted to the length of the list.
.Sp
.Vb 3
\&    my $length = 10;
\&    my @random = rand_data( $length, @deck_of_cards, { \*(Aqdo_not_repeat_index\*(Aq => 1 } );
\&    # @random has 10 items
\&
\&    my $length = 53;
\&    my @random = rand_data( $length, @deck_of_cards, { \*(Aqdo_not_repeat_index\*(Aq => 1 } );
\&    # @random has 52 items
.Ve
.Sp
Caveat: This is not a \fIuniq()\fR functionality on the list of items, this is \*(L"no repeat\*(R" based on index. So:
.Sp
.Vb 1
\&    rand_data(3, [qw(dan dan dan)]);
.Ve
.Sp
is valid (if not very useful) because it won't use index 0, 1, or 2 more than once
.Sp
This is probably what you'd want:
.Sp
.Vb 1
\&    rand_data($n, [ uniq @people ] ); # could still contain duplicates in results by using the same index more than once
.Ve
.Sp
or even:
.Sp
.Vb 1
\&    rand_data($n, \e@people, { \*(Aqdo_not_repeat_index\*(Aq => 1, \*(Aquse_unique_list\*(Aq => 1 } ); # definitely no duplicates since you uniq()ed the list *and* told it to only use each index at most once
.Ve
.Sp
Caveat: This also increases calculation time since it has to see if 
a randomly chosen index has already been used and if so try again.
.IP "\(bu" 4
\&'get_random_index'
.Sp
This should be a code ref that accepts one argument, the number of items we have to choose from, and returns an index chosen at random (however you choose to define \*(L"random\*(R")
.Sp
.Vb 4
\&    sub {
\&        my ($length) = @_;
\&        return Crypt::Random::makerandom_itv( \*(AqLower\*(Aq => 0, \*(AqUpper\*(Aq => $length, ...); 
\&    }
.Ve
.Sp
Note: The above example (w/ Strong => 0 (\s-1IE\s0 \fIread()\fR is not being blocked on /dev/random)) benchmarked appx 570 times as slow as the default rand() based solution but its much more truly random.
.RE
.RS 4
.RE
.SS "\fIrand_data_string()\fP"
.IX Subsection "rand_data_string()"
Same args as \fIrand_data()\fR. The difference is that it always returns a string regardless of context.
.PP
.Vb 2
\&    my $rand_str = rand_data_string( @rand_args ); # $rand_str contains the random string.
\&    my @stuff    = rand_data_string( @rand_args ); # $stuff[0] contains the random string.
.Ve
.SS "\fIrand_data_array()\fP"
.IX Subsection "rand_data_array()"
Same args as \fIrand_data()\fR. The difference is that it always returns an array regardless of context.
.PP
.Vb 2
\&    my @rand_data = rand_data_array( @rand_args ); # @rand_data contains the random items
\&    my $rand_data = rand_data_array( @rand_args ); # $rand_data is an array ref to the list of random items
.Ve
.SS "\fIseed_calc_with()\fP"
.IX Subsection "seed_calc_with()"
This is a simple shortcut function you can use to call srand() for you with a pre-done calculation as outlined below. If this does not do what you like use srand() directly.
.PP
It brings in Time::HiRes for you if needed and then calls srand() like so:
.PP
.Vb 1
\&    srand($hires_time, $hires_micro_seconds, $$, \*(AqYOUR ARGUEMENT HERE\*(Aq || rand( 999_999_999_999_999));
.Ve
.PP
You don't have to call it of course but here are some examples if you choose to:
.PP
.Vb 5
\&    seed_calc_with();                                  # same as seed_calc_with( rand( 999_999_999_999_999 ) );
\&    seed_calc_with( rand( 999_999_999_999_999 ) );     # same as seed_calc_with();
\&    seed_calc_with( unpack \*(Aq%L*\*(Aq, \`ps axww | gzip\` );
\&    seed_calc_with( Math::TrulyRandom::truly_random_value() );
\&    seed_calc_with( Crypt::Random::makerandom(...) );
.Ve
.PP
Its not exportable on purpose to discourage blindly using it since calling srand() improperly can result in rand()'s result being less random.
.PP
See srand and rand for more information.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Throws no warnings or errors of its own.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Data::Rand requires no configuration files or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\*(L"seed_calc_with\*(R"() brings in Time::HiRes
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-data\-rand@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "TODO"
.IX Header "TODO"
Re-add tests I had worked up that went away with a failed \s-1HD\s0
.PP
May add these behaviorial booleans to option hashref depending on feedback:
.PP
.Vb 3
\&    \*(Aqreturn_on_bad_args\*(Aq # do not use defaults, just return;
\&    \*(Aqcarp_on_bad_args\*(Aq   # carp() about what args are bad and why
\&    \*(Aqcroak_on_bad_args\*(Aq  # same as carp but fatal
.Ve
.PP
Gratefully apply helpful suggestions to make this module better
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Muey  \f(CW\*(C`<http://drmuey.com/cpan_contact.pl>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Daniel Muey \f(CW\*(C`<http://drmuey.com/cpan_contact.pl>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE \*(L"AS IS\*(R" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.\s0
.PP
\&\s-1IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE \s0(\s-1INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE\s0), \s-1EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.\s0
