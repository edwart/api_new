.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JSON::DWIW::Boolean 3"
.TH JSON::DWIW::Boolean 3 "2010-05-10" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::DWIW::Boolean \- Return a true or false value when evaluated
in boolean context \-\- to be used with JSON::DWIW\->encode() to
explicitly specify a boolean value.`
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use JSON::DWIW;
\& my $val1 = JSON::DWIW\->true;
\& my $val2 = JSON::DWIW\->false;
\& 
\& # or
\& 
\& use JSON::DWIW::Boolean;
\& my $val1 = JSON::DWIW::Boolean\->new(1); # true value
\& my $val2 = JSON::DWIW::Boolean\->new(0); # false value
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is not intended to be used directly.  It is intended
to be used as part of \s-1JSON::DWIW\s0 to specify that a true or false
value should be output when converting to \s-1JSON,\s0 since Perl does
not have explicit values for true and false.
.PP
Overloading is used, so if a JSON::DWIW::Boolean object is
evaluated in boolean context, it will evaluate to 1 or 0,
depending on whether the object was initialized to true or false.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """new($val)"""
.el .SS "\f(CWnew($val)\fP"
.IX Subsection "new($val)"
Returns an object initialized with \f(CW$val\fR as its boolean value.
.ie n .SS """true()"""
.el .SS "\f(CWtrue()\fP"
.IX Subsection "true()"
Class method that returns a new object initialized to a true value.
.ie n .SS """false()"""
.el .SS "\f(CWfalse()\fP"
.IX Subsection "false()"
Class method that returns a new object initialized to a false value.
.SH "AUTHOR"
.IX Header "AUTHOR"
Don Owens <don@regexguy.com>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2007\-2010 Don Owens <don@regexguy.com>.  All rights reserved.
.PP
This is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.  See perlartistic.
.PP
This program is distributed in the hope that it will be
useful, but \s-1WITHOUT ANY WARRANTY\s0; without even the implied
warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR
PURPOSE.\s0
