.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenAPI 3"
.TH OpenAPI 3 "2016-03-05" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenAPI \- A high\-level implementation of the OpenAPI specification
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module's functionality is entirely \fIin potentiam\fR, which means I've not
written it yet.
.PP
The immediate purpose of it is to make sure there's something sensible in the
top-level namespace on the \s-1CPAN\s0 itself.
.SH "PLAN"
.IX Header "PLAN"
.IP "Create a set of classes that represent the types that the specification lays out." 4
.IX Item "Create a set of classes that represent the types that the specification lays out."
.PD 0
.IP "Create a validator that will validate an OpenAPI schema against the OpenAPI specification." 4
.IX Item "Create a validator that will validate an OpenAPI schema against the OpenAPI specification."
.IP "Create a validator that will validate a Perl data structure against a (valid) schema." 4
.IX Item "Create a validator that will validate a Perl data structure against a (valid) schema."
.IP "Create a system to produce a schema or set of schemata in a manner agnostic to the \s-1URI\s0 schema, or lack thereof, on which the schema is served." 4
.IX Item "Create a system to produce a schema or set of schemata in a manner agnostic to the URI schema, or lack thereof, on which the schema is served."
.IP "Somehow understand the URIs in the document, especially with regards to the templated paths, such that the \s-1URI\s0 schema can be introspected, allowing for integration with the various frameworks." 4
.IX Item "Somehow understand the URIs in the document, especially with regards to the templated paths, such that the URI schema can be introspected, allowing for integration with the various frameworks."
.IP "Understand hyperlinks within a third-party schema and denormalise, or lazily fetch referenced schemata as required." 4
.IX Item "Understand hyperlinks within a third-party schema and denormalise, or lazily fetch referenced schemata as required."
.IP "Conversely, have hyperlinks within a local schema that don't actually have URIs associated with them yet." 4
.IX Item "Conversely, have hyperlinks within a local schema that don't actually have URIs associated with them yet."
.PD
.PP
The idea is to be able to either parse or produce OpenAPI schemata and then
validate documents against it. When the OpenAPI schema is parsed it should look
the same as if it had been created locally, modulo lazy fetching of references.
That means that when a parsed schema is rendered out to \s-1JSON,\s0 it should look
the same as the original document.
.PP
Probably the sane way to do this would be to have the \s-1API\s0 object be a level
above the schemata themselves, as a sort of collection object, holding
sufficient information to reconstruct URIs absolutely, or resolve them
relatively.
