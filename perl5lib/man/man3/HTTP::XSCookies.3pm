.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTTP::XSCookies 3"
.TH HTTP::XSCookies 3 "2017-07-25" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::XSCookies \- Fast XS cookie mangling for Perl
.SH "VERSION"
.IX Header "VERSION"
Version 0.000014
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use HTTP::XSCookies qw/bake_cookie crush_cookie/;
\&
\&    my $cookie = bake_cookie(\*(AqPerl&C\*(Aq => \*(AqThey rulez!\*(Aq);
\&    my $values = crush_cookie($cookie);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements cookie creation (baking) and parsing (crushing)
using \s-1XS,\s0 therefore improving the speed of a pure Perl implementation.
.SH "METHODS/ATTRIBUTES"
.IX Header "METHODS/ATTRIBUTES"
.SS "bake_cookie"
.IX Subsection "bake_cookie"
.Vb 1
\&    my $cookie = bake_cookie(\*(Aqfoo\*(Aq => \*(Aqbar\*(Aq);
\&
\&    my $cookie = bake_cookie(\*(Aqbaz\*(Aq, {
\&        value   => \*(AqFrodo\*(Aq,
\&        path    => \*(AqmyPath\*(Aq,
\&        domain  => \*(Aq.test.com\*(Aq,
\&        expires => \*(Aq+11h\*(Aq
\&    });
.Ve
.PP
Generate a cookie string with proper encoding. The first argument is
the cookie name; the second argument can be a string (the cookie value)
or a hashref with a set of key-value pairs.  These are the keys that
are recognized:
.IP "\(bu" 4
value: the cookie's value (a string).
.IP "\(bu" 4
Domain: the cookie's domain (a string).
.IP "\(bu" 4
Path: the cookie's path (a string).
.IP "\(bu" 4
Max-Age: the cookie's maximum age (a string).
.IP "\(bu" 4
Expires: the cookie's expiration date/time, in any of the
following formats:
.Sp
.Vb 9
\&    Expires => time + 3 * 60 * 60 # 3 hours from now
\&    Expires => \*(AqWed, 18\-Sep\-2016 22:33:44 GMT\*(Aq  # fixed time
\&    Expires => \*(Aq+20s\*(Aq # 20 seconds from now
\&    Expires => \*(Aq+40m\*(Aq # 40 minutes from now
\&    Expires => \*(Aq+2h\*(Aq  # 2 hours from now
\&    Expires => \*(Aq\-3d\*(Aq  # 3 days ago (i.e. "expired")
\&    Expires => \*(Aq+4M\*(Aq  # in 4 months
\&    Expires => \*(Aq+8y\*(Aq  # in 8 years
\&    Expires => \*(Aqnow\*(Aq  # right now
.Ve
.IP "\(bu" 4
Secure: whether the cookie is secure (a boolean, default is false).
.IP "\(bu" 4
HttpOnly: whether the cookie is \s-1HTTP\s0 only (a boolean, default is false).
.IP "\(bu" 4
SameSite: whether the cookie ought not to be sent along with cross-site requests (a string, either strict or lax, default is unset). See: <https://tools.ietf.org/html/draft\-west\-first\-party\-cookies\-07>.
.SS "crush_cookie"
.IX Subsection "crush_cookie"
.Vb 1
\&    my $values = crush_cookie($cookie);
.Ve
.PP
Parse a (properly encoded) cookie string into a hashref with the
individual values.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cookie::Baker.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Gonzalo Diethelm.
.PP
This library is free software; you can redistribute it
and/or modify it under the terms of the \s-1MIT\s0 license.
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "\(bu" 4
Gonzalo Diethelm \f(CW\*(C`gonzus AT cpan DOT org\*(C'\fR
.SH "THANKS"
.IX Header "THANKS"
.IP "\(bu" 4
Sawyer X \f(CW\*(C`xsawyerx AT cpan DOT org\*(C'\fR.
.IP "\(bu" 4
p5pclub, for the inspiration.
