.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Library 3"
.TH SQL::Library 3 "2012-06-05" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Library \- A module for managing simple SQL libraries
stored in INI\-like files.
.SH "VERSION"
.IX Header "VERSION"
This document refers to version 0.0.5 of SQL::Library.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use SQL::Library;
\&    
\&  my $sql = new SQL::Library { lib => \*(Aqsql.lib\*(Aq };
\&                        # or { lib => [ <FH> ] };
\&                        # or { lib => [ $string ] };
\&
\&  ## Ask for a library entry by name...
\&  my $query = $sql\->retr( \*(Aqsome_sql_query\*(Aq );
\&
\&  ## Add or update an entry...
\&  $sql\->set( \*(Aqyet_another_query\*(Aq, <<\*(AqEND\*(Aq );
\&  SELECT foo
\&  FROM   bar
\&  WHERE  zoot = 1
\&  END
\&
\&  ## Remove an entry from the library...
\&  $sql\->drop( \*(Aqone_more_query\*(Aq );
\&
\&  ## List the entries in the library...
\&  print join( \*(Aq : \*(Aq, $sql\->elements ), "\en";
\&
\&  ## Dump the contents of the library to a string...
\&  my $lib_str = $sql\->dump;
\&
\&  ## Write the library to disk...
\&  $sql\->write;
.Ve
.SH "LIBRARY FILE FORMAT"
.IX Header "LIBRARY FILE FORMAT"
The format for the library files looks a little like an \s-1INI\s0 file.
However, unlike an \s-1INI\s0 file, it does not handle key=value pairs
which are divided into sections.  Library entry names are on a line by
themselves, enclosed in square brackets.  Whatever occurs until the
next title tag is the value of the library entry.  Blank lines, pound
signs (#) and \*(C+ style comments (//) are all discarded.
.PP
A sample library file might look like this:
.PP
.Vb 1
\&  ## A sample library file
\&
\&  [get_survey_questions]
\&  select   question_no,
\&           question_text
\&  from     question
\&  where    survey_id = ?
\&  order by question_no
\&
\&  [get_survey_info]
\&  select title,
\&         date_format( open_date, \*(Aq%Y%m%d\*(Aq ) as open_date, 
\&         date_format( close_date, \*(Aq%Y%m%d\*(Aq ) as close_date, 
\&         template_file
\&  from   survey
\&  where  survey_id = ?
.Ve
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.IP "\s-1PACKAGE\-\s0>new( \s-1HASHREF \s0)" 4
.IX Item "PACKAGE->new( HASHREF )"
Create a new library handle.  Currently, the only argument supported in
the hashref is \f(CW\*(C`lib\*(C'\fR, which refers to the file containing the \s-1SQL\s0
library.
.ie n .IP "$OBJ\->retr( \s-1NAME \s0)" 4
.el .IP "\f(CW$OBJ\fR\->retr( \s-1NAME \s0)" 4
.IX Item "$OBJ->retr( NAME )"
Returns the library entry referenced by \s-1NAME.\s0
.ie n .IP "$OBJ\->set( \s-1NAME, VALUE \s0)" 4
.el .IP "\f(CW$OBJ\fR\->set( \s-1NAME, VALUE \s0)" 4
.IX Item "$OBJ->set( NAME, VALUE )"
Sets the library entry \s-1NAME\s0 to \s-1VALUE. \s0 This is used both to create new
library entries and to update existing ones.
.ie n .IP "$OBJ\->drop( \s-1NAME \s0)" 4
.el .IP "\f(CW$OBJ\fR\->drop( \s-1NAME \s0)" 4
.IX Item "$OBJ->drop( NAME )"
Drops entry \s-1NAME\s0 form the library.
.ie n .IP "$OBJ\->elements" 4
.el .IP "\f(CW$OBJ\fR\->elements" 4
.IX Item "$OBJ->elements"
Returns a list of all entry names in the library.
.ie n .IP "$OBJ\->dump" 4
.el .IP "\f(CW$OBJ\fR\->dump" 4
.IX Item "$OBJ->dump"
Returns a string containing the library contents in the same
\&\s-1INI\s0 format that the module reads from.
.ie n .IP "$OBJ\->write" 4
.el .IP "\f(CW$OBJ\fR\->write" 4
.IX Item "$OBJ->write"
Writes the library to the file named in \f(CW\*(C`lib\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
\&\fIwrite()\fR should write to a string, if it was so called.
.SH "TO-DO"
.IX Header "TO-DO"
.IP "\(bu" 4
Complete test suite
.SH "AUTHOR"
.IX Header "AUTHOR"
Doug Gorley <douggorley@shaw.ca>
.SH "CO-MAINTAINER"
.IX Header "CO-MAINTAINER"
Chris Vertonghen <chrisv@cpan.org> (post\-0.0.3)
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2004 by Doug Gorley.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.
